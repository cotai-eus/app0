version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cotai_postgres
    environment:
      POSTGRES_DB: cotai
      POSTGRES_USER: cotai
      POSTGRES_PASSWORD: cotai123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - cotai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cotai -d cotai"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MongoDB
  mongo:
    image: mongo:6.0
    container_name: cotai_mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: cotai
      MONGO_INITDB_ROOT_PASSWORD: cotai123
      MONGO_INITDB_DATABASE: cotai
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - cotai_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: cotai_redis
    command: redis-server --appendonly yes --requirepass cotai123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cotai_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cotai_backend
    environment:
      - DEBUG=true
      - POSTGRES_SERVER=postgres
      - MONGODB_URL=mongodb://cotai:cotai123@mongo:27017
      - REDIS_URL=redis://:cotai123@redis:6379/0
      - CELERY_BROKER_URL=redis://:cotai123@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:cotai123@redis:6379/2
    volumes:
      - .:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - cotai_network
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./app
          target: /app/app
        - action: rebuild
          path: ./pyproject.toml

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cotai_celery_worker
    command: poetry run celery -A app.tasks.celery_app worker --loglevel=info --concurrency=2
    environment:
      - DEBUG=true
      - POSTGRES_SERVER=postgres
      - MONGODB_URL=mongodb://cotai:cotai123@mongo:27017
      - REDIS_URL=redis://:cotai123@redis:6379/0
      - CELERY_BROKER_URL=redis://:cotai123@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:cotai123@redis:6379/2
    volumes:
      - .:/app
      - celery_logs:/app/logs
    networks:
      - cotai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./app
          target: /app/app

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cotai_celery_beat
    command: poetry run celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      - DEBUG=true
      - POSTGRES_SERVER=postgres
      - MONGODB_URL=mongodb://cotai:cotai123@mongo:27017
      - REDIS_URL=redis://:cotai123@redis:6379/0
      - CELERY_BROKER_URL=redis://:cotai123@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:cotai123@redis:6379/2
    volumes:
      - .:/app
      - celery_logs:/app/logs
    networks:
      - cotai_network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cotai_flower
    command: poetry run celery -A app.tasks.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://:cotai123@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:cotai123@redis:6379/2
    ports:
      - "5555:5555"
    networks:
      - cotai_network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx (Load Balancer & Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: cotai_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - cotai_network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  celery_logs:
    driver: local

networks:
  cotai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

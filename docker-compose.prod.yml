version: '3.8'

# =====================================================
# 🐳 DOCKER COMPOSE - COTAI BACKEND PRODUCTION
# Production-ready deployment with optimizations
# =====================================================

services:
  # =================== NGINX REVERSE PROXY ===================
  nginx:
    image: nginx:1.25-alpine
    container_name: cotai_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - llm-service
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=proxy"
      - "environment=production"

  # =================== BACKEND API ===================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cotai_backend
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - backend_logs:/app/logs
      - backend_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=api"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =================== LLM SERVICE ===================
  llm-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: llm-processor
    container_name: cotai_llm_service
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - llm_models:/app/models
      - llm_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=llm-api"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '2.0'

  # =================== OLLAMA LLM ENGINE ===================
  ollama:
    image: ollama/ollama:latest
    container_name: cotai_ollama
    restart: unless-stopped
    volumes:
      - ollama_models:/root/.ollama
    environment:
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_NUM_PARALLEL: 4
      OLLAMA_MAX_LOADED_MODELS: 3
      OLLAMA_FLASH_ATTENTION: true
    deploy:
      resources:
        limits:
          memory: 12G
          cpus: '4.0'
        reservations:
          memory: 6G
          cpus: '2.0'
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=llm"
      - "ai=ollama"
      - "environment=production"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  # =================== CELERY WORKERS (Multiple) ===================
  celery-worker-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: celery-worker
    container_name: cotai_celery_worker_1
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - worker_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=worker"
      - "worker-id=1"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1.5G
          cpus: '1.0'

  celery-worker-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: celery-worker
    container_name: cotai_celery_worker_2
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - worker_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=worker"
      - "worker-id=2"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1.5G
          cpus: '1.0'

  # =================== CELERY BEAT SCHEDULER ===================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: celery-beat
    container_name: cotai_celery_beat
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - celery_beat_data:/app/celerybeat-schedule
      - beat_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=scheduler"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # =================== POSTGRESQL ===================
  postgres:
    image: postgres:15-alpine
    container_name: cotai_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_relational}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ./db/postgres-config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/scripts:/docker-entrypoint-initdb.d
    command: >
      postgres -c config_file=/etc/postgresql/postgresql.conf
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app_user} -d ${POSTGRES_DB:-app_relational}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=database"
      - "database=postgresql"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # =================== MONGODB ===================
  mongodb:
    image: mongo:7.0
    container_name: cotai_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-app_flexible}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - mongodb_logs:/var/log/mongodb
      - ./db/mongo-config/mongod.conf:/etc/mongo/mongod.conf
    command: ["mongod", "--config", "/etc/mongo/mongod.conf"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=database"
      - "database=mongodb"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # =================== REDIS ===================
  redis:
    image: redis:7.0-alpine
    container_name: cotai_redis
    restart: unless-stopped
    command: >
      redis-server /etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
      - ./db/redis-config/redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=cache"
      - "database=redis"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # =================== PROMETHEUS (METRICS) ===================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: cotai_prometheus
    restart: unless-stopped
    volumes:
      - prometheus_data:/prometheus
      - prometheus_logs:/var/log/prometheus
      - ./db/prometheus-config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./db/prometheus-config/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=monitoring"
      - "interface=prometheus"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # =================== GRAFANA (MONITORING) ===================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: cotai_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_logs:/var/log/grafana
      - ./db/grafana-config:/etc/grafana
      - ./db/provisioning:/etc/grafana/provisioning
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=monitoring"
      - "interface=grafana"
      - "environment=production"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

# =================== VOLUMES ===================
volumes:
  # Database volumes
  postgres_data:
  postgres_logs:
  mongodb_data:
  mongodb_config:
  mongodb_logs:
  redis_data:
  redis_logs:
  
  # Application volumes
  ollama_models:
  llm_models:
  llm_logs:
  backend_logs:
  backend_data:
  
  # Worker volumes
  celery_beat_data:
  worker_logs:
  beat_logs:
  
  # Monitoring volumes
  grafana_data:
  grafana_logs:
  prometheus_data:
  prometheus_logs:
  
  # Proxy volumes
  nginx_logs:

# =================== NETWORKS ===================
networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "project=cotai-backend"
      - "network=main"
      - "environment=production"

# =====================================================
# ðŸ”§ NGINX SITE CONFIGURATION - COTAI BACKEND
# API Gateway with load balancing and SSL termination
# =====================================================

# Upstream definitions
upstream backend_api {
    least_conn;
    server backend:8000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream llm_service {
    least_conn;
    server llm-service:8001 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream monitoring_grafana {
    server grafana:3000;
}

upstream monitoring_prometheus {
    server prometheus:9090;
}

# HTTP Server (Redirect to HTTPS)
server {
    listen 80;
    server_name localhost cotai.local;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS Server
server {
    listen 443 ssl http2;
    server_name localhost cotai.local;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/cotai.crt;
    ssl_certificate_key /etc/nginx/ssl/cotai.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    
    # Root location
    location / {
        return 200 '{"message":"CotAi Backend API Gateway","status":"healthy","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }
    
    # Backend API routes
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://backend_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # HTTP/1.1 support
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
    
    # LLM Service routes
    location /llm/ {
        limit_req zone=api burst=10 nodelay;
        
        proxy_pass http://llm_service/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Extended timeouts for LLM processing
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Disable buffering for streaming responses
        proxy_buffering off;
        proxy_cache off;
        
        # HTTP/1.1 support
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
    
    # Grafana monitoring interface
    location /monitoring/ {
        auth_basic "Monitoring Access";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        proxy_pass http://monitoring_grafana/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for Grafana
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Prometheus metrics (restricted access)
    location /metrics/ {
        allow 172.20.0.0/16;  # Docker network only
        deny all;
        
        proxy_pass http://monitoring_prometheus/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }
    
    # Static files caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
    }
    
    # Security.txt for security researchers
    location = /.well-known/security.txt {
        return 200 "Contact: security@yourdomain.com\nExpires: 2026-12-31T23:59:59.000Z\nPreferred-Languages: en\n";
        add_header Content-Type text/plain;
    }
    
    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|log|ini|conf)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

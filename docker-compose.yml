version: '3.8'

# =====================================================
# 🐳 DOCKER COMPOSE - COTAI BACKEND ARCHITECTURE
# PostgreSQL + MongoDB + Redis + LLM + Monitoring + Backend
# =====================================================

services:
  # =================== BACKEND API ===================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cotai_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=api"
  # =================== POSTGRESQL ===================
  postgres:
    image: postgres:15-alpine
    container_name: cotai_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: app_relational
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: secure_password_here
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgres-config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_relational"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=database"
      - "database=postgresql"
  # =================== MONGODB ===================
  mongodb:
    image: mongo:7.0
    container_name: cotai_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secure_password_here
      MONGO_INITDB_DATABASE: app_flexible
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./db/mongo-config/mongod.conf:/etc/mongo/mongod.conf
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=database"
      - "database=mongodb"
  # =================== REDIS ===================
  redis:
    image: redis:7.0-alpine
    container_name: cotai_redis
    restart: unless-stopped
    command: >
      redis-server /etc/redis/redis.conf
      --requirepass redis_password_here
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
      - ./db/redis-config/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=cache"
      - "database=redis"
  # =================== LLM SYSTEM (OLLAMA) ===================
  ollama:
    image: ollama/ollama:latest
    container_name: cotai_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_NUM_PARALLEL: 2
      OLLAMA_MAX_LOADED_MODELS: 2
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=llm"
      - "ai=ollama"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # =================== ADMINER (DATABASE ADMIN) ===================
  adminer:
    image: adminer:4.8.1
    container_name: cotai_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: "nette"
    depends_on:
      - postgres
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=admin"
      - "interface=database"

  # =================== MONGO EXPRESS (MONGODB ADMIN) ===================
  mongo-express:
    image: mongo-express:1.0.0-alpha
    container_name: cotai_mongo_express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: secure_password_here
      ME_CONFIG_MONGODB_URL: mongodb://admin:secure_password_here@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      - mongodb
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=admin"
      - "interface=mongodb"

  # =================== REDIS COMMANDER (REDIS ADMIN) ===================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cotai_redis_commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: "local:redis:6379:0:redis_password_here"
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    depends_on:
      - redis
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=admin"
      - "interface=redis"
  # =================== GRAFANA (MONITORING) ===================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: cotai_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./db/grafana-config:/etc/grafana
      - ./db/provisioning:/etc/grafana/provisioning
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=monitoring"
      - "interface=grafana"
  # =================== PROMETHEUS (METRICS) ===================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: cotai_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./db/prometheus-config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./db/prometheus-config/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app_network
    labels:
      - "project=cotai-backend"
      - "service=monitoring"
      - "interface=prometheus"

# =================== VOLUMES ===================
volumes:
  postgres_data:
  mongodb_data:
  mongodb_config:
  redis_data:
  grafana_data:
  prometheus_data:
  ollama_models:

# =================== NETWORKS ===================
networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "project=cotai-backend"
      - "network=main"
